<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>netstandard1.0;netstandard2.0;</TargetFrameworks>
    <RootNamespace>Object.Extensions.ScopeFunction</RootNamespace>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
  </PropertyGroup>

   <PropertyGroup>
    <PackageId>Object.Extensions.ScopeFunction</PackageId>
    <Version>1.0.2</Version>
    <PackageTags>Scope function extensions; Apply; ApplyForEach; object Apply; pipe-forward; |></PackageTags>
    <Authors>Ivan Koshelev</Authors>
    <ProjectUrl>https://github.com/IKoshelev/Object.Extensions.ScopeFunctions</ProjectUrl>
    <Description>
      Scope functions Apply, ApplyForEach and Map. They apply passed functions to a given object and 
      return that original object (or function return for Map), allowing you to have seamless side-effects 
      and manipulate objects in fluent invocation chains or object iniatlizers, i.e. GetConfig().Apply(changes).Build() 
    </Description>
    <IncludeSource>True</IncludeSource>
    <IncludeSymbols>True</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    <License>MIT</License>
    <PackageReadmeFile>readme.md</PackageReadmeFile>
  </PropertyGroup>

<ItemGroup>
    <None Include="readme.md" Pack="true" PackagePath="\"/>
</ItemGroup>

</Project>
